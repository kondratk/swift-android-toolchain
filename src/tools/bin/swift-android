#!/usr/bin/env python
from __future__ import print_function

import os
import sys
import errno

git_url = "https://github.com/readdle/swift-android-buildtools"

self_dir = os.path.dirname(os.path.realpath(__file__))
base_dir = os.path.dirname(self_dir)
build_tools_dir = os.path.join(base_dir, "build-tools")
repo_dir = os.path.join(build_tools_dir, "repository")

# Utils

def check_return_code(code):
    if code != 0:
        sys.exit(code)


def sh(cmd, env=None, exit_on_fail=True):
    from subprocess import Popen

    process = Popen(cmd)
    code = process.wait()

    if exit_on_fail and code != 0:
        sys.exit(code)
    else:
        return code

def link(version):
    cwd = os.getcwd()

    os.chdir(build_tools_dir)

    src = version
    dst = "current"

    try:
        os.symlink(src, dst)
    except OSError as e:
        if e.errno == errno.EEXIST:
            os.remove(dst)
            os.symlink(src, dst)
        else:
            raise e

    os.chdir(cwd)

def most_recent_version(versions):
    import re
    from distutils.version import StrictVersion

    swift_version = "swift5.4"
    def map_versions(version):
        swift_version_regexp = re.compile(r'^(?P<version>.*)-{}$'.format(swift_version))
        matches = swift_version_regexp.match(version)

        if matches is None:
            return None

        return matches.group("version")

    versions = filter(lambda v: v is not None, map(map_versions, versions))

    def tools_version_predicate(version):
        try:
            v = StrictVersion(version)
            return True
        except:
            return False

    filtered = filter(tools_version_predicate, versions)
    ranged = sorted(filtered, key=StrictVersion)

    if len(ranged) == 0:
        return None

    return "{}-{}".format(ranged[-1], swift_version)

# Git

def git_clone():
    sh(["git", "clone", "--mirror", git_url, repo_dir])


def git_fetch():
    sh(["git", "--git-dir", repo_dir, "fetch"], exit_on_fail=False)


def git_checkout(version):
    path = os.path.join(build_tools_dir, version)
    sh(["git", "clone", "--shared", "--single-branch", "--branch", version, repo_dir, path])


def get_git_tags():
    from subprocess import check_output

    try:
        output = check_output(["git", "--no-pager", "--git-dir", repo_dir, "tag", "--list"])
        return output.strip().split("\n")
    except:
        return []


def print_git_tags():
    sh(["git", "--no-pager", "--git-dir", repo_dir, "tag", "--list"])


def check_git_repo(version=None):
    from subprocess import check_output, STDOUT

    if not version is None:
        path = os.path.join(build_tools_dir, version, ".git")
    else:
        path = repo_dir

    try:
        check_output(["git", "--git-dir", path, "rev-parse"], stderr=STDOUT)
        return True
    except:
        return False


def ensure_git_repo():
    if check_git_repo() == False:
        git_clone()
    else:
        git_fetch()

# Commands

def show_versions():
    ensure_git_repo()
    print_git_tags()


def install(version):
    ensure_git_repo()
    if check_git_repo(version) == False:
        git_checkout(version)


def update(version=None):
    ensure_git_repo()

    if version is None:
        versions = get_git_tags()
        version = most_recent_version(versions)

    if version is None:
        print("Cannot find version")
        sys.exit(127)

    install(version)
    link(version)


if __name__ == "__main__":
    from argparse import ArgumentParser, RawTextHelpFormatter

    parser = ArgumentParser(formatter_class=RawTextHelpFormatter)
    commands = parser.add_subparsers(dest="command")

    tools = commands.add_parser("tools", formatter_class=RawTextHelpFormatter)
    tools_group = tools.add_mutually_exclusive_group(required=True)

    tools_group.add_argument(
        "-l", "--list", 
        dest="show_list", 
        action="store_true",
        default=False,
        help="Show list of available versions"
    )

    tools_group.add_argument(
        "-i", "--install", 
        dest="install_version", 
        metavar="version",
        help="Download specific version"
    )

    tools_group.add_argument(
        "-u", "--update", 
        dest="update_to", 
        metavar="version",
        nargs='?',
        action="store",
        const="LATEST",
        help="Download specific version and make it current. \nIf no one is specified latest will be used."
    )

    args = parser.parse_args()

    if args.command == "tools":
        if args.show_list:
            show_versions()
        elif not args.install_version is None:
            install(args.install_version)
        elif args.update_to == "LATEST":
            update()
        elif not args.update_to is None:
            update(args.update_to)
        elif not args.select_version is None:
            select_version(args.select_version)
